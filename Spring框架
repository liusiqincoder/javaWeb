Spring采取了以下几种技术：
   1.基于POJO的编程（简单的javaBean）Spring不要求实现Spring规范的接口或继承Spring规范的类
   2.通过依赖注入组合类
        程序运行期间由容器动态地为目标类的实例构建完成依赖关系的手段（通过属性设置或构造函数引入依赖对象达到松耦合）
   3.面向切面编程AOP
        允许开发者把遍布应用各处的功能分离出来形成可重用的组件
        （日志记录，性能统计，安全控制，事务处理，异常处理）
   4.利用模板消除重复代码
   5.Bean容器
      将管理的对象称为Bean，Spring是基于容器的框架

Spring是轻量级的控制反转（IOC）和面向切面的框架（AOP）
    适用范围：1.构建企业应用（SpringMvc+Spring+hibernate/ibatis）
             2.单独使用bean容器
             3.其它应用（如：消息的支持）
             4.在互联网的应用
             
    Bean配置项：Id   Class   Scope    Constructor arguments     Properties    Autowiring mode     Initialization/destruction mode
        初始化，静态初始化和实例初始化
        
        ApplicationContext apc=new ClassPathXmlApplicationContext("beans.xml");
        /*静态化工厂
        car c= (car) apc.getBean("aCar");
        System.out.println(c.getName());
        
        xml配置
        <!--静态工厂方法创建Bean-->
    <bean id="aCar" class="创建工厂.carFactory" factory-method="getCar">
        <constructor-arg value="宝马"/>
    </bean>

    <!--实例化工厂创建Bean-->
    <!--首先，创建实例工厂对象-->
    <bean id="instanceFactory" class="创建工厂.instanceFactory"></bean>
    <!--然后就可以使用instanceFactory创建car对象-->
    <bean id="instanceCar" factory-bean="instanceFactory" factory-method="getCar" scope="prototype">
        <constructor-arg value="奔驰"/>
    </bean>
    
        作用域：singleton单例，指一个Bean容器中只存在一份
               prototype每次请求创建新的实例，destory不生效
               request 每次http请求创建一个实例且仅在当前request生效
               session同上
               global session基于portlet的web中有效，在web中和session差不多
